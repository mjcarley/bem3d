head	1.1;
access;
symbols;
locks
	ensmjc:1.1; strict;
comment	@ * @;


1.1
date	2009.08.17.15.28.59;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* msh2bem3d.c
 * 
 * Copyright (C) 2006, 2009 Michael Carley
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdio.h>
#include <unistd.h>
#include <math.h>
#include <stdlib.h>

#include <gsl/gsl_math.h>

#include <glib.h>

#include <gts.h>

#include "bem3d.h"
#include "bem3d-private.h"

gint main(gint argc, gchar **argv)

{
  FILE *input ;
  BEM3DMesh *m ;
  gint n ;
  gdouble sharp_edge_angle ;
  gchar *efile ;
  GLogLevelFlags loglevel ;
  gchar ch, *progname ;
  extern char *optarg;

  progname = g_strdup(g_basename(argv[0])) ;
  n = 0 ; efile = NULL ; 
  loglevel = G_LOG_LEVEL_MESSAGE ;
  sharp_edge_angle = 15.0 ;
  while ( (ch = getopt(argc, argv, "a:e:hl:n:")) != EOF ) {
    switch (ch) {
    default: 
    case 'h':
      fprintf(stderr, 
	      "%s: convert MSH to BEM3D format\n\n", progname) ;
      fprintf(stderr, 
	      "Usage %s <options> < input.msh > output.bem3d\n", 
	      progname) ;
      fprintf(stderr, 
	      "Options:\n"
	      "        -a # (angle for determining sharp edges)\n"
/*       "-e <edge file name>\n" */
	      "        -h print this message and exit\n"
	      "        -l # (set logging level)\n"
	      "        -n # (index of first node)\n") ;
      return 0 ;
      break ;
    case 'a': 
      sscanf(optarg, "%lg", &sharp_edge_angle) ;
      break ;
    case 'e': efile = g_strdup(optarg) ; break ;
    case 'l': loglevel = 1 << atoi(optarg) ; break ;
    case 'n': sscanf(optarg, "%d", &n) ; break ;
    }
  }

  bem3d_logging_init(stderr, NULL, loglevel, NULL) ;
  bem3d_shapefunc_lookup_init() ;

  fprintf(stderr, "%s", BEM3D_STARTUP_MESSAGE) ;

  sharp_edge_angle *= M_PI/180.0 ;
  input = stdin ;
  m = bem3d_mesh_new(bem3d_mesh_class(),
		   gts_face_class(),
		   gts_edge_class(),
		   gts_vertex_class()) ;

  bem3d_gmsh_read(m, input) ;

  n = bem3d_mesh_index_nodes(m, sharp_edge_angle, n) ;

  fprintf(stderr, "%s: last index: %d\n", progname, n) ;

  bem3d_mesh_write(m, stdout) ;

  return 0 ;
}
@
