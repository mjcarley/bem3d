head	1.1;
access;
symbols;
locks
	ensmjc:1.1; strict;
comment	@ * @;


1.1
date	2017.12.06.11.52.34;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* bem3d-process.c
 * 
 * Copyright (C) 2010, 2017 Michael Carley
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include <glib.h>

#include <gts.h>

#ifdef HAVE_LIBMATHEVAL
#include <matheval.h>
#endif /*HAVE_LIBMATHEVAL*/

#include "bem3d.h"
#include "bem3d-private.h"

#ifndef HAVE_LIBMATHEVAL
gint main(gint argc, gchar **argv)

{
  fprintf(stderr, 
	  "%s: requires libmatheval. Recompile with libmatheval enabled\n",
	  argv[0]) ; 

  return 0 ;
}

#else /*HAVE_LIBMATHEVAL*/

gint main(gint argc, gchar **argv)

{
  BEM3DMesh *m, *m0 ;
  BEM3DMeshData *f ;
  GtsFile *fid ;
  gchar *progname ;
  gchar *ipfile, *opfile, *datafile, *funcfile ;
  GLogLevelFlags loglevel ;
  FILE *fs ;
  gint mesh_data_width ;
  gchar ch ;
  BEM3DFunction *efunc ;
  BEM3DMotion *motion ;

  progname = g_strdup(g_path_get_basename(argv[0])) ;

  f = NULL ;
  loglevel = G_LOG_LEVEL_MESSAGE ;
  mesh_data_width = -1 ;
  ipfile = opfile = datafile = funcfile = NULL ; fs = NULL ;
  while ( (ch = getopt(argc, argv, "d:E:F:hl:i:o:")) != EOF ) {
    switch (ch) {
    default: 
    case 'h':
      fprintf(stderr, 
	      "%s: perform postprocessing operations on BEM3D meshes "
	      "and data\n\n",
	      progname) ;
      fprintf(stderr, "Usage: %s <options>\n", progname) ;
      fprintf(stderr, 
	      "Options:\n"
	      "        -d <data file name>\n"
	      "        -E # (expand output mesh data block to this size)\n"
	      "        -F <function definition file>\n"
	      "        -h (print this message and exit)\n"
	      "        -l # (set logging level)\n"
	      "        -i <bem3d mesh input file>\n"
	      "        -o <output file name>\n") ;
      return 0 ;
      break ;
    case 'd': datafile = g_strdup(optarg) ; break ;
    case 'E': mesh_data_width = atoi(optarg) ; break ;
    case 'F': funcfile = g_strdup(optarg) ; break ;
    case 'l': loglevel = 1 << atoi(optarg) ; break ;
    case 'i': ipfile = g_strdup(optarg) ; break ;
    case 'o': opfile = g_strdup(optarg) ; break ;
    }
  }

  bem3d_logging_init(stderr, "", loglevel, NULL) ;
  bem3d_shapefunc_lookup_init() ;

  fprintf(stderr, "%s", BEM3D_STARTUP_MESSAGE) ;

  efunc = bem3d_function_new(bem3d_function_class()) ;
  
  if ( funcfile == NULL ) 
    g_error("%s: function definition file must be specified",
	    progname) ;
  else fs = file_open(funcfile, "-", "r", stdin) ;

  fid = gts_file_new(fs) ;
  bem3d_function_read(efunc, fid) ;
  file_close(fs) ;

  if ( ipfile == NULL ) fs = stdin ;
  else fs = file_open(ipfile, "-", "r", stdin) ;
    
  fid = gts_file_new(fs) ;
  m = bem3d_mesh_new(bem3d_mesh_class(), gts_face_class(),
		   gts_edge_class(), gts_vertex_class()) ;
  bem3d_mesh_read(m, fid) ;

  file_close(fs) ;

  if ( ipfile == NULL ) fs = stdin ;
  else fs = file_open(ipfile, "-", "r", stdin) ;
    
  fid = gts_file_new(fs) ;
  m0 = bem3d_mesh_new(bem3d_mesh_class(), gts_face_class(),
		      gts_edge_class(), gts_vertex_class()) ;
  bem3d_mesh_read(m0, fid) ;

  file_close(fs) ;

  if ( datafile != NULL ) {
    fs = file_open(datafile, "-", "r", stdin) ;
    if ( fs == NULL ) {
      fprintf(stderr, "%s: cannot open data file %s.\n",
	      progname, datafile) ;
      return 1 ;
    }
    bem3d_mesh_data_read(&f, fs) ;
    file_close(fs) ;
  }

  if ( f == NULL ) {
    f = bem3d_mesh_data_new(m, 1) ;
    bem3d_mesh_data_clear(f) ;
  }

  motion = bem3d_motion_new(bem3d_motion_class(), m, m0) ;

  if ( mesh_data_width != -1 ) 
    bem3d_mesh_data_expand(f, mesh_data_width) ;

  bem3d_motion_expand_defs(motion) ;
  bem3d_motion_create_evaluators(motion) ;
  bem3d_motion_mesh_position(motion, 0.0) ;
  bem3d_function_expand_functions(efunc) ;
  bem3d_function_apply(efunc, motion, 0.0, f) ;

  if ( opfile == NULL ) fs = stdout ;
  else
    fs = file_open(opfile, "-", "w", stdout) ;
  bem3d_mesh_data_write(f, fs) ;

  file_close(fs) ;

  return 0 ;
}

#endif /*HAVE_LIBMATHEVAL*/
@
