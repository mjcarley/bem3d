head	1.1;
access;
symbols;
locks
	ensmjc:1.1; strict;
comment	@ * @;


1.1
date	2009.08.17.15.28.59;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* bem3d2pos.c
 * 
 * Copyright (C) 2006, 2009 Michael Carley
 * 
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include <glib.h>

#include <gts.h>

#include "bem3d.h"
#include "bem3d-private.h"

FILE *file_open(gchar *fname, gchar *namedefault, gchar *mode, 
		FILE *fdefault) ;
gint file_close(FILE *f) ;

FILE *file_open(gchar *fname, gchar *namedefault, gchar *mode, 
		FILE *fdefault)

{
  FILE *f ;

  if ( !strcmp(fname, namedefault) ) return fdefault ;

  f = fopen(fname, mode) ;

  return f ;
}

gint file_close(FILE *f)

{
  if ( (f != stdin) && (f != stdout) && (f != stderr) ) fclose(f) ;

  return 0 ;
}

gint main(gint argc, gchar **argv)

{
  BEM3DMesh *m ;
  BEM3DMeshData *f ;
  GtsFile *fid ;
  gchar *progname ;
  gchar *ipfile = NULL, *opfile = NULL, *datafile = NULL ;
  gchar *title = NULL ;
  GLogLevelFlags loglevel ;
  FILE *fs ;
  bem3d_gmsh_mode_t mode ;
  gint field ;
  gchar ch ;

  progname = g_strdup(g_basename(argv[0])) ;
  mode = BEM3D_GMSH_SCALAR ; field = 0 ; f = NULL ;
  loglevel = G_LOG_LEVEL_MESSAGE ;
  while ( (ch = getopt(argc, argv, "d:f:ghl:i:o:t:")) != EOF ) {
    switch (ch) {
    default: 
    case 'h':
      fprintf(stderr, 
	      "%s: translate a BEM3D geometry and data to gmsh .pos format\n\n",
	      progname) ;
      fprintf(stderr, "Usage: %s <options>\n", progname) ;
      fprintf(stderr, 
	      "Options:\n"
	      "        -d <data file name>\n"
	      "        -f # (field of data to plot)\n"
	      "        -g (output three components of gradient)\n"
	      "        -h (print this message and exit)\n"
	      "        -l # (set logging level)\n"
	      "        -i <bem3d input file>\n"
	      "        -o <output file name>\n"
	      "        -t <title for GMSH view>\n") ;
      return 0 ;
      break ;
    case 'd': datafile = g_strdup(optarg) ; break ;
    case 'f': field = atoi(optarg) ; break ;
    case 'g': mode = BEM3D_GMSH_VECTOR ; break ;
    case 'l': loglevel = 1 << atoi(optarg) ; break ;
    case 'i': ipfile = g_strdup(optarg) ; break ;
    case 'o': opfile = g_strdup(optarg) ; break ;
    case 't': title = g_strdup(optarg) ; break ;
    }
  }

  bem3d_logging_init(stderr, "", loglevel, NULL) ;
  bem3d_shapefunc_lookup_init() ;

  fprintf(stderr, "%s", BEM3D_STARTUP_MESSAGE) ;

  if ( ipfile == NULL ) fs = stdin ;
  else {
    fs = file_open(ipfile, "-", "r", stdin) ;
    if ( fs == NULL ) {
      fprintf(stderr, "%s: cannot open input file %s.\n",
	      progname, ipfile) ;
      return 1 ;
    }
  }
    
  fid = gts_file_new(fs) ;
  m = bem3d_mesh_new(bem3d_mesh_class(), gts_face_class(),
		   gts_edge_class(), gts_vertex_class()) ;
  bem3d_mesh_read(m, fid) ;

  file_close(fs) ;

  if ( datafile != NULL ) {
    fs = file_open(datafile, "-", "r", stdin) ;
    if ( fs == NULL ) {
      fprintf(stderr, "%s: cannot open data file %s.\n",
	      progname, datafile) ;
      return 1 ;
    }
    bem3d_mesh_data_read(&f, fs) ;
    file_close(fs) ;
  }

  if ( f == NULL ) {
    f = bem3d_mesh_data_new(m, field+1) ;
    bem3d_mesh_data_clear(f) ;
  }

  if ( bem3d_mesh_data_node_number(f) < bem3d_mesh_node_number(m) ) {
    fprintf(stderr, "%s: number of mesh nodes (%d) is greater than number of "
	    "data points (%d)\n", progname, bem3d_mesh_node_number(m),
	    bem3d_mesh_data_node_number(f)) ;
    return 1 ;
  }

  if ( opfile == NULL ) fs = stdout ;
  else {
    fs = file_open(opfile, "-", "w", stdout) ;
    if ( fs == NULL ) {
      fprintf(stderr, "%s: cannot open output file %s.\n",
	      progname, opfile) ;
    }
  }
  
  bem3d_mesh_write_gmsh(m, f, field, title, mode, fs) ;

  return 0 ;
}
@
