head	1.3;
access;
symbols;
locks
	ensmjc:1.3; strict;
comment	@ * @;


1.3
date	2009.08.17.15.28.35;	author ensmjc;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.20.13.21.12;	author ensmjc;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.10.10.35.44;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* lookup.c
 * 
 * Copyright (C) 2006 Michael Carley
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/**
 * @@defgroup lookup Looking up data
 *
 * Various ::BEM3DLookupFunc's for dummy operations, such as calculating
 * local surface coefficients.
 *
 * @@{
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdlib.h>
#include <string.h>

#include <glib.h>
#include <gts.h>


#include "bem3d.h"
#include "bem3d-private.h"

/** 
 * A ::BEM3DLookupFunc which returns 0.0 for the normal derivative and
 * 1.0 for the surface term, to be used in integrating a real Green's
 * function over a surface.
 * 
 * @@param i ignored
 * @@param j local index
 * @@param data ignored
 * @@param s surface term
 * @@param ds normal derivative
 * 
 * @@return ::BEM3D_SUCCESS on success.
 */

gint bem3d_lookup_func_unit(gint i, gint j, 
			    gpointer data,
			    GArray *s, GArray *ds)

{
  g_array_index(s, gdouble, j) = 1.0 ;
  g_array_index(ds, gdouble, j) = 0.0 ;

  return BEM3D_SUCCESS ;
}

/** 
 * A BEM3DLookupFunc which returns 0.0+j0.0 for the normal derivative
 * and 1.0+j0.0 for the surface term, to be used in integrating a
 * complex Green's function over a surface.
 * 
 * @@param i ignored
 * @@param j local index
 * @@param data ignored
 * @@param s surface term
 * @@param ds normal derivative
 * 
 * @@return ::BEM3D_SUCCESS on success.
 */

gint bem3d_lookup_func_unit_c(gint i, gint j, 
			      gpointer data,
			      GArray *s, GArray *ds)

{
  g_array_index(s, gdouble, 2*j) = 1.0 ;
  g_array_index(s, gdouble, 2*j+1) = 0.0 ;
  g_array_index(ds, gdouble, 2*j) = 0.0 ;
  g_array_index(ds, gdouble, 2*j+1) = 0.0 ;

  return BEM3D_SUCCESS ;
}

/** 
 * A ::BEM3DLookupFunc which returns 1.0 for the normal derivative and
 * 1.0 for the surface term, to be used in testing quadrature rules. 
 * 
 * @@param i ignored
 * @@param j local index
 * @@param data ignored
 * @@param s surface term
 * @@param ds normal derivative
 * 
 * @@return ::BEM3D_SUCCESS on success.
 */

gint bem3d_lookup_func_both_unit(gint i, gint j, 
				 gpointer data,
				 GArray *s, GArray *ds)

{
  g_array_index(s, gdouble, j) = 1.0 ;
  g_array_index(ds, gdouble, j) = 1.0 ;

  return BEM3D_SUCCESS ;
}

/**
 * @@}
 * 
 */
@


1.2
log
@*** empty log message ***
@
text
@d54 1
a54 1
 * @@return 
d58 2
a59 2
			  gpointer data,
			  GArray *s, GArray *ds)
d79 1
a79 1
 * @@return 0 on success.
d105 1
a105 1
 * @@return 
d109 2
a110 2
			       gpointer data,
			       GArray *s, GArray *ds)
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
 * Various ::BEMLookupFunc's for dummy operations, such as calculating
d29 3
d40 2
a41 2
#include "bem.h"
#include "bem-private.h"
d44 1
a44 1
 * A ::BEMLookupFunc which returns 0.0 for the normal derivative and
d57 1
a57 1
gint bem_lookup_func_unit(gint i, gint j, 
d65 1
a65 1
  return BEM_SUCCESS ;
d69 1
a69 1
 * A BEMLookupFunc which returns 0.0+j0.0 for the normal derivative
d79 1
a79 1
 * @@return 
d82 3
a84 3
gint bem_lookup_func_unit_c(gint i, gint j, 
			    gpointer data,
			    GArray *s, GArray *ds)
d92 1
a92 1
  return BEM_SUCCESS ;
d96 1
a96 1
 * A ::BEMLookupFunc which returns 1.0 for the normal derivative and
d108 1
a108 1
gint bem_lookup_func_both_unit(gint i, gint j, 
d116 1
a116 1
  return BEM_SUCCESS ;
@
