head	1.1;
access;
symbols;
locks
	ensmjc:1.1; strict;
comment	@ * @;


1.1
date	2017.07.03.10.47.18;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* configure.c
 * 
 * Copyright (C) 2010 by Michael Carley
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/**
 * @@defgroup config Configuring BEM3D
 * @@{
 * 
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include <gts.h>
#include <glib.h>

#include "bem3d.h"
#include "bem3d-private.h"

GHashTable *idmap = NULL, *varmap = NULL ;

/*pre-defined structs for Green's functions*/
BEM3DGreensFunction greens_func_laplace = 
  {bem3d_greens_func_laplace, TRUE, 1} ;
BEM3DGreensFunction greens_func_helmholtz = 
  {bem3d_greens_func_helmholtz, FALSE, 1} ;
BEM3DGreensFunction greens_func_helmholtz_hs = 
  {bem3d_greens_func_helmholtz_hs, FALSE, 1} ;

BEM3DConfiguration *bem3d_configuration_new()

{
  BEM3DConfiguration *c ;

  c = (BEM3DConfiguration *)g_malloc(sizeof(BEM3DConfiguration)) ;

  c->job = g_string_new("BEM3D") ;
  c->keys = g_ptr_array_new() ;

  bem3d_greens_function_func(&(c->gfunc)) = bem3d_greens_func_laplace ;
  bem3d_greens_function_is_real(&(c->gfunc)) = TRUE ;
  c->qrule = bem3d_quadrature_rule_default ;
  c->qdata = bem3d_quadrature_selector_default() ;

  return c ;
}

/* static void configuration_set_pointer(GKeyFile *k, gchar *s, gpointer *p) */

/* { */
/*   gchar *v ; */

/*   if ( !g_key_file_has_key(k, "BEM3D", s, NULL) ) return ; */

/*   v = g_key_file_get_value(k, "BEM3D", s, NULL) ; */

/*   *p = bem3d_configuration_pointer_from_identifier(v) ; */

/*   return ; */
/* } */

static void parse_quadrature_key(GKeyFile *key, gchar *group, 
				 gchar *k, BEM3DQuadratureSelector *s)
  
{
  gchar *v, **t ;
  GError *error = NULL ;
  gint N = 0, M = 0 ;
  gdouble sigma ;
  BEM3DQuadratureRuleFunc f ;

  v = g_key_file_get_value(key, group, k, &error) ;
  if ( error != NULL ) g_error("%s: %s", __FUNCTION__, error->message) ;

  t = g_strsplit(g_strdelimit(v, "(), ", '|'), "|", 0) ;

  f = bem3d_configuration_pointer_from_identifier(t[0]) ;

  if ( f == NULL ) 
    g_error("%s: unrecognized identifier %s in config file", 
	    __FUNCTION__, t[0]) ;
  if ( t[1] == NULL ) 
    g_error("%s: no selection parameter specified for quadrature rule %s",
	    __FUNCTION__, t[0]) ;

  errno = 0 ; sigma = strtod(t[1], NULL) ;
  if ( errno != 0 ) 
    g_error("%s: could not convert selection parameter %s for "
	    "quadrature rule %s", __FUNCTION__, t[1], t[0]) ;

  if ( t[2] == NULL ) {
    bem3d_quadrature_selector_add(s, f, sigma, N, M) ;
    return ;
  }

  errno = 0 ; N = strtol(t[2], NULL, 0) ; 
  if ( errno != 0 ) 
    g_error("%s: could not convert selection parameter %s "
	    "for quadrature rule %s", __FUNCTION__, t[2], t[0]) ;
  if ( t[3] == NULL ) {
    bem3d_quadrature_selector_add(s, f, sigma, N, M) ;
    return ;
  }

  errno = 0 ; M = strtol(t[3], NULL, 0) ; 
  if ( errno != 0 ) 
    g_error("%s: could not convert selection parameter %s "
	    "for quadrature rule %s", __FUNCTION__, t[3], t[0]) ;
  bem3d_quadrature_selector_add(s, f, sigma, N, M) ;


  return ;
}

static void quadrature_rules_set(GKeyFile *key, gchar *group, 
				 BEM3DQuadratureSelector *s)

{
  gint i, nk ;
  gchar **w ;
  GError *error = NULL ;

  w = g_key_file_get_keys(key, "BEM3D::Quadrature", (gsize *)(&nk), &error) ;
  if ( error != NULL ) g_error("%s: %s", __FUNCTION__, error->message) ;

  if ( nk == 0 || w == NULL ) return ;

  bem3d_quadrature_selector_clear(s) ;
  for ( i = 0 ; i < nk ; i ++ )
    parse_quadrature_key(key, "BEM3D::Quadrature", w[i], s) ;

  /*check that the parameters are ordered*/
  if ( bem3d_quadrature_selector_sigma(s,0) != 0.0 ) 
    g_error("%s: first quadrature selection parameter must be 0", 
	    __FUNCTION__) ;
  for ( i = 1 ; i < bem3d_quadrature_selector_length(s); i ++ ) 
    if ( !(bem3d_quadrature_selector_sigma(s,i) >
	   bem3d_quadrature_selector_sigma(s,i-1)) )
      g_error("%s: quadrature selection parameters must be in ascending order", 
	      __FUNCTION__) ;
      

  return ;
}

static void physics_set(GKeyFile *key, BEM3DConfiguration *c)

/*set Green's function and other physical data for problem*/

{
  gchar *v ;
  GError *error = NULL ;
  BEM3DGreensFunction *p ;

  if ( g_key_file_has_key(key, "BEM3D::Physics", "greens_function", &error) ) {
    /*set Green's function*/
    v = g_key_file_get_value(key, "BEM3D::Physics", "greens_function", NULL) ;
    if ( (p = bem3d_configuration_pointer_from_identifier(v)) == NULL ) 
      g_error("%s: unrecognized Green's function (%s) in key file", 
	      __FUNCTION__, v) ;
    c->gfunc = *p ;
  }

  return ;
}

/** 
 * Set fields of a ::BEM3DConfiguration from a key file, overwriting
 * previous settings. Settings are read from the "BEM3D" group of the
 * file, to allow codes to keep all their settings in one
 * place. Values not in the "BEM3D" group are ignored.
 * 
 * @@param c a ::BEM3DConfiguration;
 * @@param k a ::GKeyFile containing settings for \a c.
 * 
 * @@return ::BEM3D_SUCCESS on success.
 */

gint bem3d_configuration_set(BEM3DConfiguration *c, gpointer k) 

{
#if GLIB_CHECK_VERSION(2,14,0)
  GKeyFile *key = k ;

  if ( !g_key_file_has_group(key, "BEM3D") &&
       !g_key_file_has_group(key, "BEM3D::Quadrature")
       ) return BEM3D_SUCCESS ;

  /*quadrature rules*/
  quadrature_rules_set(key, "BEM3D::Quadrature", c->qdata) ;

  /*Green's function and other physical data*/
  physics_set(key, c) ;

#else
  g_message("%s: key file support not available with this version of GLIB",
	    __FUNCTION__) ;
#endif /*GLIB_CHECK_VERSION(2,14,0)*/

  return BEM3D_SUCCESS ;
}

gint bem3d_configuration_read(BEM3DConfiguration *c, gchar *file)

{
#if GLIB_CHECK_VERSION(2,14,0)
  GKeyFile *key ;
  GError *error ;
  GKeyFileFlags flags = G_KEY_FILE_KEEP_COMMENTS |
    G_KEY_FILE_KEEP_TRANSLATIONS ;

  key = g_key_file_new() ;

  error = NULL ;
  if ( !(g_key_file_load_from_file(key, file, flags, &error)) ) {
    g_error("%s: %s, reading %s", __FUNCTION__, error->message, file) ;
  }

  bem3d_configuration_set(c, key) ;			  

  g_key_file_free(key) ;  
#else
  g_message("%s: key file support not available with this version of GLIB",
	    __FUNCTION__) ;
#endif /*GLIB_CHECK_VERSION(2,14,0)*/

  return BEM3D_SUCCESS ;
}

gint bem3d_configuration_init(void)

{
  idmap = g_hash_table_new(g_str_hash, g_str_equal) ;
  varmap = g_hash_table_new(NULL, NULL) ;

  /*add the built-in functions*/
  /*quadrature*/
  bem3d_configuration_add_identifier("bem3d_quadrature_newman", 
				     bem3d_quadrature_rule_newman) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_newman_gradient", 
				     bem3d_quadrature_rule_newman_gradient) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_gauss",
  				     bem3d_quadrature_rule_gauss) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_khayat_wilton", 
				     bem3d_quadrature_rule_kw) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_polar", 
				     bem3d_quadrature_rule_polar) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_polar_hypersingular", 
				     bem3d_quadrature_rule_polar_hs) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_wandzura_xiao", 
				     bem3d_quadrature_rule_wx) ;
  bem3d_configuration_add_identifier("bem3d_quadrature_hayami", 
				     bem3d_quadrature_rule_hayami) ;

  /*Green's functions*/
  bem3d_configuration_add_identifier("bem3d_greens_function_laplace", 
				     &greens_func_laplace) ;
  bem3d_configuration_add_identifier("bem3d_greens_function_helmholtz", 
				     &greens_func_helmholtz) ;
  bem3d_configuration_add_identifier("bem3d_greens_function_helmholtz_hypersingular", 
				     &greens_func_helmholtz_hs) ;
  
  return BEM3D_SUCCESS ;
}

gint bem3d_configuration_add_identifier(const gchar *id, gpointer v)

{
  g_assert(idmap != NULL && varmap != NULL) ;

  g_hash_table_insert(idmap, (gpointer)id, v) ;
  g_hash_table_insert(varmap, v, (gpointer)id) ;

  return BEM3D_SUCCESS ;
}

gchar *bem3d_configuration_identifier_from_pointer(gpointer v)

{
  if ( idmap == NULL ) return NULL ;

  return g_hash_table_lookup(varmap, v) ;
}

gpointer bem3d_configuration_pointer_from_identifier(const gchar *id)

{
  if ( idmap == NULL ) return NULL ;

  return g_hash_table_lookup(idmap, id) ;
}

/**
 * @@}
 * 
 */
@
