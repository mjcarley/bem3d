head	1.3;
access;
symbols;
locks
	ensmjc:1.3; strict;
comment	@ * @;


1.3
date	2009.08.17.15.28.35;	author ensmjc;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.20.13.21.12;	author ensmjc;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.10.10.35.44;	author ensmjc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/* geometry.c
 * 
 * Copyright (C) 2006 Michael Carley
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif /*HAVE_CONFIG_H*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>

#include <glib.h>
#include <gts.h>

#include "bem3d-private.h"

/**
 * @@defgroup geometry Geometric utilities
 * @@{
 * 
 */

/** 
 * Generate a GtsSurface of points on a regular grid, adding triangles
 * regularly spaced in x and y.
 * 
 * @@param s a GtsSurface;
 * @@param ni number of points in x grid direction;
 * @@param nj number of points in y grid direction.
 * 
 * @@return BEM3D_SUCCESS on success.
 */

gint bem3d_geometry_plane(GtsSurface *s, gint ni, gint nj)

{
  GtsVertex *v1, *v2, *v3, *v ;
  GtsEdge *e1, *e2, *e3 ;
  GtsFace *f ;
  gdouble ee, xi, eta ;
  gint i, j ;

  g_return_val_if_fail(s != NULL, BEM3D_NULL_ARGUMENT) ;
  g_return_val_if_fail(GTS_IS_SURFACE(s), BEM3D_ARGUMENT_WRONG_TYPE) ;
  g_return_val_if_fail(ni > 0, BEM3D_ARGUMENT_OUT_OF_RANGE) ;  
  g_return_val_if_fail(nj > 0, BEM3D_ARGUMENT_OUT_OF_RANGE) ;  

  ee = 1000.0 ;
  v1 = gts_vertex_new(gts_vertex_class(), -ee, -ee, 0) ;
  v2 = gts_vertex_new(gts_vertex_class(), ee, -ee, 0) ;
  v3 = gts_vertex_new(gts_vertex_class(), 0, ee, 0) ;

  e1 = gts_edge_new(gts_edge_class(), v1, v2) ;
  e2 = gts_edge_new(gts_edge_class(), v2, v3) ;
  e3 = gts_edge_new(gts_edge_class(), v3, v1) ;
  f = gts_face_new(gts_face_class(), e1, e2, e3) ;
  gts_surface_add_face(s, f) ;

  for ( i = 0 ; i < ni ; i ++ ) {
    xi = (gdouble)i/(gdouble)(ni-1) ;
    for ( j = 0 ; j < nj ; j ++ ) {
      eta = (gdouble)j/(gdouble)(nj-1) ;
      v = gts_vertex_new(gts_vertex_class(), xi, eta, 0.0) ;
      gts_delaunay_add_vertex(s, v, NULL) ;
    }
  }
  
  gts_allow_floating_vertices = TRUE;
  gts_object_destroy (GTS_OBJECT (v1));
  gts_object_destroy (GTS_OBJECT (v2));
  gts_object_destroy (GTS_OBJECT (v3));
  gts_allow_floating_vertices = FALSE;

  return 0 ;
}

/**
 * @@}
 * 
 */
@


1.2
log
@*** empty log message ***
@
text
@d34 16
a49 61
gint bem3d_geometry_connect(GtsVertex **v, GtsEdge **e, gint n,
			    gboolean closed)

{
  gint i ;

  for ( i = 0 ; i < n-1 ; i ++ ) {
    e[i] = gts_edge_new(gts_edge_class(), v[i], v[i+1]) ;
  }
  if ( closed ) 
    e[n-1] = gts_edge_new(gts_edge_class(), v[n-1], v[0]) ;
  else 
    e[n-1] = NULL ;

  return 0 ;
}

gint bem3d_geometry_duplicate(GtsVertex **v, GtsVertex **w, gint n)

{
  gint i ;
  
  for ( i = 0 ; i < n ; i ++ ) {
    v[i] = gts_vertex_new(gts_vertex_class(),
			  GTS_POINT(w[i])->x,
			  GTS_POINT(w[i])->y,
			  GTS_POINT(w[i])->z) ;
  }

  return 0 ;
}

gint bem3d_geometry_square(GtsVertex **v, gint n)

{
  gint i, j ;
  gdouble x, y ;
  
  x = y = 0.0 ;
  for ( i = j = 0 ; i < n ; (i ++), (j ++) ) {
    x = (gdouble)i/(gdouble)(n-1) ;
    v[j] = gts_vertex_new(gts_vertex_class(), x, y, 0.0) ;    
  }

  for ( i = 1 ; i < n ; (i ++), (j ++) ) {
    y = (gdouble)i/(gdouble)(n-1) ;
    v[j] = gts_vertex_new(gts_vertex_class(), x, y, 0.0) ;    
  }  

  for ( i = 1 ; i < n ; (i ++), (j ++) ) {
    x = 1.0-(gdouble)i/(gdouble)(n-1) ;
    v[j] = gts_vertex_new(gts_vertex_class(), x, y, 0.0) ;    
  }

  for ( i = 1 ; i < n-1 ; (i ++), (j ++) ) {
    y = 1.0-(gdouble)i/(gdouble)(n-1) ;
    v[j] = gts_vertex_new(gts_vertex_class(), x, y, 0.0) ;    
  }

  return 0 ;
}
d60 5
d93 5
@


1.1
log
@Initial revision
@
text
@d20 4
d32 1
a32 2
#include "bmesh.h"
#include "bem-private.h"
d34 2
a35 2
gint bem_geometry_connect(GtsVertex **v, GtsEdge **e, gint n,
			  gboolean closed)
d51 1
a51 1
gint bem_geometry_duplicate(GtsVertex **v, GtsVertex **w, gint n)
d66 1
a66 1
gint bem_geometry_square(GtsVertex **v, gint n)
d96 1
a96 1
gint bem_geometry_plane(GtsSurface *s, gint ni, gint nj)
@
